#!/usr/bin/ruby
# encoding: utf-8

#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative 'SymTable'
require_relative 'AST'
require_relative 'Lexer'


# Obtengo el nombre del archivo pasado como parámetro
filename = ARGV[0]
# Si no le pasé nada, entonces lanzo un error
if !filename
  raise 'Debe pasarle un archivo al lexer'
end

# Creo el objeto lexer, lo mando a que tokenice e imprima los errores
l = Lexer.new(filename)
l.tokenize

if not l.errores.empty?
	l.printOutput
	raise 'El programa tiene errores léxicos, no se procederá a hacer el análisis sintáctico'
end

class ErrorSintactico < RuntimeError
	attr_reader :token

	def initialize(token)
		@token = token
	end

	def to_s
		"Error sintactico con el token \"#{@token.class.to_s}\" en la fila #{@token.linea}, columna: #{@token.columna}."
	end
end

class Parser < Racc::Parser

module_eval(<<'...end gramatica.y/module_eval...', 'gramatica.y', 230)

	def on_error(id, token, stack)
		raise ErrorSintactico::new(token)
	end

	def initialize (tokens)
		@tokens = tokens
	end

	def parse
		do_parse
	end

	def next_token
    	token = @tokens.shift
	    if token != nil
	      tk_parser = [token.class, token]
	    else
	      tk_parser = [false,false]
	    end
    	return tk_parser
	end

...end gramatica.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    75,    76,    86,    87,    83,    77,    78,    79,    33,   130,
    84,    85,    82,   -40,   -27,    80,   105,    61,   131,    60,
    32,    81,   -40,   -27,   107,    70,    71,    72,    73,    74,
    81,    75,    76,    86,    87,    83,    77,    78,    79,   139,
    29,    84,    85,    82,   105,   127,    80,    96,    75,    76,
   104,   132,    81,    77,    78,    79,    70,    71,    72,    73,
    74,   105,   105,     3,    81,    94,     2,   129,   137,    81,
    72,    73,    74,    70,    71,    72,    73,    74,    81,   133,
   140,    75,    76,    86,    87,    26,    77,    78,    79,     6,
    66,    84,    85,    81,    32,    32,    80,    70,    71,    72,
    73,    74,    81,    62,   135,    81,    70,    71,    72,    73,
    74,    75,    76,    86,    87,    83,    77,    78,    79,    57,
     9,    84,    85,    82,    31,   141,    80,    81,   106,   142,
    29,    25,    81,    72,    73,    74,    70,    71,    72,    73,
    74,    75,    76,    86,    87,    83,    77,    78,    79,    81,
   146,    84,    85,    82,     6,     4,    80,    97,    98,   100,
    99,   149,    81,   nil,   nil,   nil,    70,    71,    72,    73,
    74,    75,    76,    86,    87,    83,    77,    78,    79,   nil,
   nil,    84,    85,    82,    75,    76,    80,   nil,   nil,    77,
    78,   nil,    81,   nil,   nil,   nil,    70,    71,    72,    73,
    74,    97,    98,   100,    99,    81,   nil,   nil,   nil,    70,
    71,    72,    73,    74,    75,    76,    86,    87,   nil,    77,
    78,    79,   nil,   nil,    84,    85,    81,   nil,   nil,    80,
    70,    71,    72,    73,    74,    81,   nil,   nil,   nil,    70,
    71,    72,    73,    74,    75,    76,   -75,   -75,   nil,    77,
    78,    79,   nil,   nil,   -75,   -75,    81,   nil,   nil,    80,
    70,    71,    72,    73,    74,    81,   nil,   nil,   nil,    70,
    71,    72,    73,    74,    75,    76,    86,    87,    83,    77,
    78,    79,   147,   nil,    84,    85,    82,   nil,   nil,    80,
   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,   nil,    70,
    71,    72,    73,    74,    75,    76,   -75,   -75,   nil,    77,
    78,    79,   nil,   nil,   -75,   -75,    75,    76,   nil,    80,
   nil,    77,    78,   nil,   nil,    81,   nil,   nil,   nil,    70,
    71,    72,    73,    74,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,   -75,   -75,
   nil,    77,    78,    79,   nil,   nil,   -75,   -75,   nil,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,   -75,   -75,
   nil,    77,    78,    79,   nil,   nil,   -75,   -75,   nil,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,    86,    87,
    83,    77,    78,    79,    95,   nil,    84,    85,    82,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,    86,    87,
    83,    77,    78,    79,   nil,   nil,    84,    85,    82,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   123,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,    86,    87,
    83,    77,    78,    79,    93,   nil,    84,    85,    82,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,    86,    87,
    83,    77,    78,    79,   nil,   nil,    84,    85,    82,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,    86,    87,
    83,    77,    78,    79,   nil,   nil,    84,    85,    82,   nil,
   nil,    80,   nil,    69,   nil,   nil,   nil,    81,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    53,    54,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,    51,
   nil,   nil,   nil,    52,    40,    38,    37,     9,    39,    53,
    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,
   nil,   nil,    51,   nil,   nil,   nil,    52,    40,    38,    37,
     9,    39,    53,    54,   nil,   nil,   nil,   nil,    49,   nil,
   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,    52,
    40,    38,    37,     9,    39,    53,    54,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    42,    67,   nil,    51,   nil,
   nil,   nil,    52,    40,    38,    37,     9,    39,    53,    54,
   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,
   nil,    51,   nil,   nil,   nil,    52,    40,    38,    37,     9,
    39,    53,    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,
   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,    52,    40,
    38,    37,     9,    39,    53,    54,   nil,   nil,   nil,   nil,
    49,   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,
   nil,    52,    40,    38,    37,     9,    39,    53,    54,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,
    51,   nil,   nil,   nil,    52,    40,    38,    37,     9,    39,
    53,    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
    42,   nil,   nil,    51,   nil,   nil,   nil,    52,    40,    38,
    37,     9,    39,    53,    54,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,
    52,    40,    38,    37,     9,    39,    53,    54,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,    51,
   nil,   nil,   nil,    52,    40,    38,    37,     9,    39,    53,
    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,
   nil,   nil,    51,   nil,   nil,   nil,    52,    40,    38,    37,
     9,    39,    53,    54,   nil,   nil,   nil,   nil,    49,   nil,
   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,    52,
    40,    38,    37,     9,    39,    53,    54,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,
   nil,   nil,    52,    40,    38,    37,     9,    39,    53,    54,
   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,
   nil,    51,   nil,   nil,   nil,    52,    40,    38,    37,     9,
    39,    53,    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,
   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,    52,    40,
    38,    37,     9,    39,    53,    54,   nil,   nil,   nil,   nil,
    49,   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,
   nil,    52,    40,    38,    37,     9,    39,    53,    54,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,
    51,   nil,   nil,   nil,    52,    40,    38,    37,     9,    39,
    53,    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
    42,   nil,   nil,    51,   nil,   nil,   nil,    52,    40,    38,
    37,     9,    39,    53,    54,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,
    52,    40,    38,    37,     9,    39,    53,    54,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,    51,
   nil,   nil,   nil,    52,    40,    38,    37,     9,    39,    53,
    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,
   nil,   nil,    51,   nil,   nil,   nil,    52,    40,    38,    37,
     9,    39,    53,    54,   nil,   nil,   nil,   nil,    49,   nil,
   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,    52,
    40,    38,    37,     9,    39,    53,    54,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,
   nil,   nil,    52,    40,    38,    37,     9,    39,    53,    54,
   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,
   nil,    51,   nil,   nil,   nil,    52,    40,    38,    37,     9,
    39,    53,    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,
   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,    52,    40,
    38,    37,     9,    39,    53,    54,   nil,   nil,   nil,   nil,
    49,   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,
   nil,    52,    40,    38,    37,     9,    39,    53,    54,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,
    51,   nil,   nil,   nil,    52,    40,    38,    37,     9,    39,
    53,    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
    42,   nil,   nil,    51,   nil,   nil,   nil,    52,    40,    38,
    37,     9,    39,    53,    54,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,    42,   nil,   nil,    51,   nil,   nil,   nil,
    52,    40,    38,    37,     9,    39,    53,    54,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    42,   nil,   nil,    51,
   nil,   nil,   nil,    52,    40,    38,    37,     9,    39,    53,
    54,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,    42,
   nil,   nil,    51,   nil,   nil,   nil,    52,    40,    38,    37,
     9,    39,     9,   nil,     3,   nil,    22,     2,   nil,   nil,
   nil,   nil,   nil,    20,   nil,    23,    19,   nil,     9,   nil,
     3,    24,    22,     2,   nil,   nil,   nil,   nil,   nil,    20,
   nil,    23,    19,   nil,     9,   nil,     3,    24,    22,     2,
   nil,   nil,   nil,   nil,   nil,    20,   nil,    23,    19,   nil,
     9,   nil,     3,    24,    22,     2,   nil,   nil,   nil,   nil,
   nil,    20,   nil,    23,    19,   nil,     9,   nil,     3,    24,
    22,     2,   nil,   nil,   nil,   nil,   nil,    20,   nil,    23,
    19,   nil,     9,   nil,     3,    24,    22,     2,   nil,   nil,
   nil,   nil,   nil,    20,   nil,    23,    19,   nil,     9,   nil,
     3,    24,    22,     2,   nil,   nil,   nil,   nil,   nil,    20,
   nil,    23,    19,   nil,     9,   nil,     3,    24,    22,     2,
   nil,   nil,   nil,   nil,   nil,    20,   nil,    23,    19,   nil,
   nil,   nil,   nil,    24 ]

racc_action_check = [
   125,   125,   125,   125,   125,   125,   125,   125,    10,   124,
   125,   125,   125,    55,    11,   125,    68,    28,   124,    28,
    10,   125,    55,    11,    68,   125,   125,   125,   125,   125,
   111,   136,   136,   136,   136,   136,   136,   136,   136,   136,
    61,   136,   136,   136,    63,   100,   136,    59,    92,    92,
    63,   125,   136,    92,    92,    92,   136,   136,   136,   136,
   136,   116,   134,     0,   109,    57,     0,   116,   134,    92,
   109,   109,   109,    92,    92,    92,    92,    92,   112,   126,
   136,   117,   117,   117,   117,     5,   117,   117,   117,     5,
    34,   117,   117,    90,    34,    35,   117,    90,    90,    90,
    90,    90,   117,    29,   131,    89,   117,   117,   117,   117,
   117,    65,    65,    65,    65,    65,    65,    65,    65,    23,
    19,    65,    65,    65,     8,   137,    65,   108,    65,   138,
     6,     4,    65,   108,   108,   108,    65,    65,    65,    65,
    65,    64,    64,    64,    64,    64,    64,    64,    64,   110,
   143,    64,    64,    64,     2,     1,    64,    60,    60,    60,
    60,   148,    64,   nil,   nil,   nil,    64,    64,    64,    64,
    64,   103,   103,   103,   103,   103,   103,   103,   103,   nil,
   nil,   103,   103,   103,   115,   115,   103,   nil,   nil,   115,
   115,   nil,   103,   nil,   nil,   nil,   103,   103,   103,   103,
   103,   141,   141,   141,   141,   115,   nil,   nil,   nil,   115,
   115,   115,   115,   115,   118,   118,   118,   118,   nil,   118,
   118,   118,   nil,   nil,   118,   118,   113,   nil,   nil,   118,
   113,   113,   113,   113,   113,   118,   nil,   nil,   nil,   118,
   118,   118,   118,   118,   120,   120,   120,   120,   nil,   120,
   120,   120,   nil,   nil,   120,   120,   114,   nil,   nil,   120,
   114,   114,   114,   114,   114,   120,   nil,   nil,   nil,   120,
   120,   120,   120,   120,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   nil,   144,   144,   144,   nil,   nil,   144,
   nil,   nil,   nil,   nil,   nil,   144,   nil,   nil,   nil,   144,
   144,   144,   144,   144,   121,   121,   121,   121,   nil,   121,
   121,   121,   nil,   nil,   121,   121,    91,    91,   nil,   121,
   nil,    91,    91,   nil,   nil,   121,   nil,   nil,   nil,   121,
   121,   121,   121,   121,   nil,   nil,   nil,    91,   nil,   nil,
   nil,    91,    91,    91,    91,    91,   122,   122,   122,   122,
   nil,   122,   122,   122,   nil,   nil,   122,   122,   nil,   nil,
   nil,   122,   nil,   nil,   nil,   nil,   nil,   122,   nil,   nil,
   nil,   122,   122,   122,   122,   122,   119,   119,   119,   119,
   nil,   119,   119,   119,   nil,   nil,   119,   119,   nil,   nil,
   nil,   119,   nil,   nil,   nil,   nil,   nil,   119,   nil,   nil,
   nil,   119,   119,   119,   119,   119,    58,    58,    58,    58,
    58,    58,    58,    58,    58,   nil,    58,    58,    58,   nil,
   nil,    58,   nil,   nil,   nil,   nil,   nil,    58,   nil,   nil,
   nil,    58,    58,    58,    58,    58,    88,    88,    88,    88,
    88,    88,    88,    88,   nil,   nil,    88,    88,    88,   nil,
   nil,    88,   nil,   nil,   nil,   nil,    88,    88,   nil,   nil,
   nil,    88,    88,    88,    88,    88,    56,    56,    56,    56,
    56,    56,    56,    56,    56,   nil,    56,    56,    56,   nil,
   nil,    56,   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,
   nil,    56,    56,    56,    56,    56,   128,   128,   128,   128,
   128,   128,   128,   128,   nil,   nil,   128,   128,   128,   nil,
   nil,   128,   nil,   nil,   nil,   nil,   nil,   128,   nil,   nil,
   nil,   128,   128,   128,   128,   128,    43,    43,    43,    43,
    43,    43,    43,    43,   nil,   nil,    43,    43,    43,   nil,
   nil,    43,   nil,    43,   nil,   nil,   nil,    43,   nil,   nil,
   nil,    43,    43,    43,    43,    43,    49,    49,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    49,   nil,   nil,    49,
   nil,   nil,   nil,    49,    49,    49,    49,    49,    49,    87,
    87,   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,    87,
   nil,   nil,    87,   nil,   nil,   nil,    87,    87,    87,    87,
    87,    87,   127,   127,   nil,   nil,   nil,   nil,   127,   nil,
   nil,   nil,   127,   nil,   nil,   127,   nil,   nil,   nil,   127,
   127,   127,   127,   127,   127,    42,    42,   nil,   nil,   nil,
   nil,    42,   nil,   nil,   nil,    42,    42,   nil,    42,   nil,
   nil,   nil,    42,    42,    42,    42,    42,    42,    32,    32,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    32,   nil,
   nil,    32,   nil,   nil,   nil,    32,    32,    32,    32,    32,
    32,    33,    33,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,    33,   nil,   nil,    33,   nil,   nil,   nil,    33,    33,
    33,    33,    33,    33,    51,    51,   nil,   nil,   nil,   nil,
    51,   nil,   nil,   nil,    51,   nil,   nil,    51,   nil,   nil,
   nil,    51,    51,    51,    51,    51,    51,    52,    52,   nil,
   nil,   nil,   nil,    52,   nil,   nil,   nil,    52,   nil,   nil,
    52,   nil,   nil,   nil,    52,    52,    52,    52,    52,    52,
    53,    53,   nil,   nil,   nil,   nil,    53,   nil,   nil,   nil,
    53,   nil,   nil,    53,   nil,   nil,   nil,    53,    53,    53,
    53,    53,    53,    54,    54,   nil,   nil,   nil,   nil,    54,
   nil,   nil,   nil,    54,   nil,   nil,    54,   nil,   nil,   nil,
    54,    54,    54,    54,    54,    54,    82,    82,   nil,   nil,
   nil,   nil,    82,   nil,   nil,   nil,    82,   nil,   nil,    82,
   nil,   nil,   nil,    82,    82,    82,    82,    82,    82,   132,
   132,   nil,   nil,   nil,   nil,   132,   nil,   nil,   nil,   132,
   nil,   nil,   132,   nil,   nil,   nil,   132,   132,   132,   132,
   132,   132,    85,    85,   nil,   nil,   nil,   nil,    85,   nil,
   nil,   nil,    85,   nil,   nil,    85,   nil,   nil,   nil,    85,
    85,    85,    85,    85,    85,    24,    24,   nil,   nil,   nil,
   nil,    24,   nil,   nil,   nil,    24,   nil,   nil,    24,   nil,
   nil,   nil,    24,    24,    24,    24,    24,    24,    22,    22,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,    22,   nil,
   nil,    22,   nil,   nil,   nil,    22,    22,    22,    22,    22,
    22,    20,    20,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,    20,   nil,   nil,    20,   nil,   nil,   nil,    20,    20,
    20,    20,    20,    20,    94,    94,   nil,   nil,   nil,   nil,
    94,   nil,   nil,   nil,    94,   nil,   nil,    94,   nil,   nil,
   nil,    94,    94,    94,    94,    94,    94,    62,    62,   nil,
   nil,   nil,   nil,    62,   nil,   nil,   nil,    62,   nil,   nil,
    62,   nil,   nil,   nil,    62,    62,    62,    62,    62,    62,
    84,    84,   nil,   nil,   nil,   nil,    84,   nil,   nil,   nil,
    84,   nil,   nil,    84,   nil,   nil,   nil,    84,    84,    84,
    84,    84,    84,   105,   105,   nil,   nil,   nil,   nil,   105,
   nil,   nil,   nil,   105,   nil,   nil,   105,   nil,   nil,   nil,
   105,   105,   105,   105,   105,   105,   140,   140,   nil,   nil,
   nil,   nil,   140,   nil,   nil,   nil,   140,   nil,   nil,   140,
   nil,   nil,   nil,   140,   140,   140,   140,   140,   140,    83,
    83,   nil,   nil,   nil,   nil,    83,   nil,   nil,   nil,    83,
   nil,   nil,    83,   nil,   nil,   nil,    83,    83,    83,    83,
    83,    83,    70,    70,   nil,   nil,   nil,   nil,    70,   nil,
   nil,   nil,    70,   nil,   nil,    70,   nil,   nil,   nil,    70,
    70,    70,    70,    70,    70,    71,    71,   nil,   nil,   nil,
   nil,    71,   nil,   nil,   nil,    71,   nil,   nil,    71,   nil,
   nil,   nil,    71,    71,    71,    71,    71,    71,    72,    72,
   nil,   nil,   nil,   nil,    72,   nil,   nil,   nil,    72,   nil,
   nil,    72,   nil,   nil,   nil,    72,    72,    72,    72,    72,
    72,    73,    73,   nil,   nil,   nil,   nil,    73,   nil,   nil,
   nil,    73,   nil,   nil,    73,   nil,   nil,   nil,    73,    73,
    73,    73,    73,    73,    74,    74,   nil,   nil,   nil,   nil,
    74,   nil,   nil,   nil,    74,   nil,   nil,    74,   nil,   nil,
   nil,    74,    74,    74,    74,    74,    74,    75,    75,   nil,
   nil,   nil,   nil,    75,   nil,   nil,   nil,    75,   nil,   nil,
    75,   nil,   nil,   nil,    75,    75,    75,    75,    75,    75,
    76,    76,   nil,   nil,   nil,   nil,    76,   nil,   nil,   nil,
    76,   nil,   nil,    76,   nil,   nil,   nil,    76,    76,    76,
    76,    76,    76,    79,    79,   nil,   nil,   nil,   nil,    79,
   nil,   nil,   nil,    79,   nil,   nil,    79,   nil,   nil,   nil,
    79,    79,    79,    79,    79,    79,    81,    81,   nil,   nil,
   nil,   nil,    81,   nil,   nil,   nil,    81,   nil,   nil,    81,
   nil,   nil,   nil,    81,    81,    81,    81,    81,    81,    86,
    86,   nil,   nil,   nil,   nil,    86,   nil,   nil,   nil,    86,
   nil,   nil,    86,   nil,   nil,   nil,    86,    86,    86,    86,
    86,    86,    95,   nil,    95,   nil,    95,    95,   nil,   nil,
   nil,   nil,   nil,    95,   nil,    95,    95,   nil,   147,   nil,
   147,    95,   147,   147,   nil,   nil,   nil,   nil,   nil,   147,
   nil,   147,   147,   nil,    93,   nil,    93,   147,    93,    93,
   nil,   nil,   nil,   nil,   nil,    93,   nil,    93,    93,   nil,
   135,   nil,   135,    93,   135,   135,   nil,   nil,   nil,   nil,
   nil,   135,   nil,   135,   135,   nil,     3,   nil,     3,   135,
     3,     3,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,
     3,   nil,    26,   nil,    26,     3,    26,    26,   nil,   nil,
   nil,   nil,   nil,    26,   nil,    26,    26,   nil,    21,   nil,
    21,    26,    21,    21,   nil,   nil,   nil,   nil,   nil,    21,
   nil,    21,    21,   nil,   139,   nil,   139,    21,   139,   139,
   nil,   nil,   nil,   nil,   nil,   139,   nil,   139,   139,   nil,
   nil,   nil,   nil,   139 ]

racc_action_pointer = [
    25,   155,   112,  1320,   131,    47,    94,   nil,    85,   nil,
    -3,   -25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,
   886,  1352,   863,    83,   840,   nil,  1336,   nil,    -1,    92,
   nil,   nil,   633,   656,    71,    72,   nil,   nil,   nil,   nil,
   nil,   nil,   610,   524,   nil,   nil,   nil,   nil,   nil,   541,
   nil,   679,   702,   725,   748,   -26,   464,    13,   404,     8,
   114,     4,   932,    26,   139,   109,   nil,   nil,    -2,   nil,
  1047,  1070,  1093,  1116,  1139,  1162,  1185,   nil,   nil,  1208,
   nil,  1231,   771,  1024,   955,   817,  1254,   564,   434,    82,
    70,   314,    46,  1288,   909,  1256,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   169,   nil,   978,   nil,   nil,   104,    41,
   126,     7,    55,   203,   233,   182,    43,    79,   212,   374,
   242,   302,   344,   nil,   -30,    -2,    40,   587,   494,   nil,
   nil,    94,   794,   nil,    44,  1304,    29,    71,    90,  1368,
  1001,   158,   nil,   111,   272,   nil,   nil,  1272,   122,   nil ]

racc_action_default = [
   -75,   -75,   -75,   -75,   -75,   -75,   -75,    -9,   -75,   -16,
   -75,   -39,   -28,   -29,   -30,   -31,   -32,   -33,   -34,   -75,
   -75,   -75,   -75,   -75,   -75,   150,   -75,    -8,   -75,   -11,
   -13,    -2,   -75,   -75,   -75,   -14,   -15,   -18,   -19,   -20,
   -21,   -22,   -75,   -75,   -46,   -47,   -48,   -49,   -50,   -75,
   -52,   -75,   -75,   -75,   -75,   -38,   -75,   -75,   -75,   -75,
   -75,   -75,   -75,   -75,   -26,   -75,   -36,   -23,   -75,   -37,
   -75,   -75,   -75,   -75,   -75,   -75,   -75,   -62,   -63,   -75,
   -67,   -75,   -75,   -75,   -75,   -75,   -75,   -75,   -75,   -58,
   -61,   -64,   -66,   -75,   -75,   -75,    -1,    -3,    -4,    -5,
   -75,    -7,   -12,   -10,   -17,   -75,   -35,   -24,   -53,   -54,
   -55,   -56,   -57,   -59,   -60,   -65,   -75,   -69,   -70,   -71,
   -72,   -73,   -74,   -51,   -75,   -75,   -75,   -75,   -25,   -68,
   -41,   -75,   -75,   -45,   -75,   -75,   -75,   -75,   -75,   -75,
   -75,   -75,   -42,   -75,   -75,    -6,   -43,   -75,   -75,   -44 ]

racc_goto_table = [
     8,    10,    43,   101,    56,    30,    58,     1,     7,    28,
    63,    27,     5,    55,   nil,    65,   nil,    34,   nil,    10,
    68,   nil,   nil,    59,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    88,   nil,    89,    90,    91,    92,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   103,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   108,   109,   110,   111,   112,   113,   114,   116,
   102,   115,   nil,   nil,   117,   118,   119,   120,   121,   122,
   nil,   nil,   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   128,   nil,   nil,
   124,    10,   126,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   144,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   138,    10,   nil,   nil,   143,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   148,    10 ]

racc_goto_check = [
     3,    11,     9,     4,     9,     8,     9,     1,     6,     7,
     5,     6,     2,    14,   nil,     9,   nil,    11,   nil,    11,
     5,   nil,   nil,     3,    11,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,     9,     9,     9,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,     9,     9,     9,     9,     9,     9,     5,
     8,     9,   nil,   nil,     9,     9,     9,     9,     9,     9,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,     9,   nil,   nil,
     3,    11,     3,    11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,    11,   nil,   nil,     3,    11,   nil,   nil,
   nil,   nil,   nil,   nil,     3,    11 ]

racc_goto_pointer = [
   nil,     7,    10,    -3,   -57,   -22,     6,     3,    -1,   -18,
   nil,    -2,   nil,   nil,    -8,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    64,
    50,    35,    36,    41,    11,    12,    13,    15,    16,    17,
    18,    21,    44,    45,    46,    47,    48 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 58, :_reduce_1,
  3, 58, :_reduce_2,
  1, 61, :_reduce_3,
  1, 61, :_reduce_4,
  1, 61, :_reduce_5,
  6, 61, :_reduce_6,
  4, 63, :_reduce_7,
  2, 59, :_reduce_8,
  1, 59, :_reduce_9,
  3, 65, :_reduce_10,
  1, 65, :_reduce_11,
  3, 64, :_reduce_12,
  1, 64, :_reduce_13,
  1, 67, :_reduce_14,
  1, 67, :_reduce_15,
  1, 68, :_reduce_16,
  4, 68, :_reduce_17,
  1, 69, :_reduce_18,
  1, 69, :_reduce_19,
  1, 69, :_reduce_20,
  1, 69, :_reduce_21,
  1, 69, :_reduce_22,
  2, 70, :_reduce_23,
  3, 70, :_reduce_24,
  3, 62, :_reduce_25,
  1, 62, :_reduce_26,
  1, 60, :_reduce_27,
  1, 60, :_reduce_28,
  1, 71, :_reduce_29,
  1, 71, :_reduce_30,
  1, 71, :_reduce_31,
  1, 71, :_reduce_32,
  1, 71, :_reduce_33,
  1, 71, :_reduce_34,
  4, 73, :_reduce_35,
  3, 74, :_reduce_36,
  3, 74, :_reduce_37,
  2, 78, :_reduce_38,
  1, 78, :_reduce_39,
  2, 72, :_reduce_40,
  5, 77, :_reduce_41,
  8, 77, :_reduce_42,
  9, 75, :_reduce_43,
  11, 75, :_reduce_44,
  5, 76, :_reduce_45,
  1, 66, :_reduce_46,
  1, 66, :_reduce_47,
  1, 66, :_reduce_48,
  1, 66, :_reduce_49,
  1, 66, :_reduce_50,
  3, 66, :_reduce_51,
  1, 66, :_reduce_52,
  3, 79, :_reduce_53,
  3, 79, :_reduce_54,
  3, 79, :_reduce_55,
  3, 79, :_reduce_56,
  3, 79, :_reduce_57,
  2, 79, :_reduce_58,
  3, 80, :_reduce_59,
  3, 80, :_reduce_60,
  2, 80, :_reduce_61,
  2, 81, :_reduce_62,
  2, 81, :_reduce_63,
  2, 81, :_reduce_64,
  3, 83, :_reduce_65,
  2, 83, :_reduce_66,
  2, 83, :_reduce_67,
  4, 83, :_reduce_68,
  3, 82, :_reduce_69,
  3, 82, :_reduce_70,
  3, 82, :_reduce_71,
  3, 82, :_reduce_72,
  3, 82, :_reduce_73,
  3, 82, :_reduce_74 ]

racc_reduce_n = 75

racc_shift_n = 150

racc_token_table = {
  false => 0,
  :error => 1,
  TkConjuncion => 2,
  TkDisyuncion => 3,
  TkMenorIgual => 4,
  TkMayorIgual => 5,
  TkDesigual => 6,
  TkSiguienteCar => 7,
  TkAnteriorCar => 8,
  TkConcatenacion => 9,
  TkHacer => 10,
  TkAsignacion => 11,
  TkMenor => 12,
  TkMayor => 13,
  TkIgual => 14,
  TkValorAscii => 15,
  TkRotacion => 16,
  TkTrasposicion => 17,
  TkComa => 18,
  TkPunto => 19,
  TkDosPuntos => 20,
  TkParAbre => 21,
  TkParCierra => 22,
  TkCorcheteAbre => 23,
  TkCorcheteCierra => 24,
  TkLlaveAbre => 25,
  TkLlaveCierra => 26,
  TkSuma => 27,
  TkResta => 28,
  TkMult => 29,
  TkDiv => 30,
  TkMod => 31,
  TkNegacion => 32,
  TkCaracter => 33,
  TkFalse => 34,
  TkTrue => 35,
  TkId => 36,
  TkNum => 37,
  TkBegin => 38,
  TkEnd => 39,
  TkIf => 40,
  TkWith => 41,
  TkVar => 42,
  TkChar => 43,
  TkBool => 44,
  TkMatrix => 45,
  TkInt => 46,
  TkPrint => 47,
  TkOtherwise => 48,
  TkFor => 49,
  TkRead => 50,
  TkStep => 51,
  TkFrom => 52,
  TkTo => 53,
  TkOf => 54,
  TkWhile => 55,
  :MENOS_UNARIO => 56 }

racc_nt_base = 57

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"/\\\\\"",
  "\"\\\\/\"",
  "\"<=\"",
  "\">=\"",
  "\"/=\"",
  "\"++\"",
  "\"--\"",
  "\"::\"",
  "\"->\"",
  "\"<-\"",
  "\"<\"",
  "\">\"",
  "\"=\"",
  "\"#\"",
  "\"$\"",
  "\"?\"",
  "\",\"",
  "\".\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"not\"",
  "\"caracter\"",
  "\"false\"",
  "\"true\"",
  "\"id\"",
  "\"numero\"",
  "\"begin\"",
  "\"end\"",
  "\"if\"",
  "\"with\"",
  "\"var\"",
  "\"char\"",
  "\"bool\"",
  "\"matrix\"",
  "\"int\"",
  "\"print\"",
  "\"otherwise\"",
  "\"for\"",
  "\"read\"",
  "\"step\"",
  "\"from\"",
  "\"to\"",
  "\"of\"",
  "\"while\"",
  "MENOS_UNARIO",
  "$start",
  "bloque",
  "declaraciones",
  "instruccion",
  "tipo",
  "expresiones",
  "declaracion",
  "declarables",
  "declarable",
  "expresion",
  "valor",
  "contenedor",
  "literal",
  "matriz",
  "instruccion_unica",
  "secuenciacion",
  "asignacion",
  "entrada_salida",
  "repeticion_det",
  "repeticion_indet",
  "condicional",
  "instrucciones",
  "expresion_aritm",
  "expresion_bool",
  "expresion_char",
  "expresion_rel",
  "expresion_matr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'gramatica.y', 84)
  def _reduce_1(val, _values, result)
     tabla = TablaSimbolos.new(val[1])
				  val[3].set_tabla_padre(tabla)
				  result = ArbolBloque.new(val[3],tabla)
				
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 88)
  def _reduce_2(val, _values, result)
    result = ArbolBloque.new(val[1],nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 92)
  def _reduce_3(val, _values, result)
    result = Tipo.new('char') 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 93)
  def _reduce_4(val, _values, result)
    result = Tipo.new('bool') 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 94)
  def _reduce_5(val, _values, result)
    result = Tipo.new('int') 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 95)
  def _reduce_6(val, _values, result)
     result = Tipo.new('matrix',val[2],val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 97)
  def _reduce_7(val, _values, result)
     result = val[1].map {|s| s.set_type(val[3])} 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 99)
  def _reduce_8(val, _values, result)
    result = val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 100)
  def _reduce_9(val, _values, result)
    result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 102)
  def _reduce_10(val, _values, result)
    result = Simbolo.new(val[0],nil,val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 103)
  def _reduce_11(val, _values, result)
    result = Simbolo.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 105)
  def _reduce_12(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 106)
  def _reduce_13(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 108)
  def _reduce_14(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 109)
  def _reduce_15(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 111)
  def _reduce_16(val, _values, result)
    result = Arbol_Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 112)
  def _reduce_17(val, _values, result)
    result = Arbol_Indexacion.new(nil,val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 114)
  def _reduce_18(val, _values, result)
    result = Arbol_Literal_Bool.new('True')
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 115)
  def _reduce_19(val, _values, result)
    result = Arbol_Literal_Bool.new('False')
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 116)
  def _reduce_20(val, _values, result)
    result = Arbol_Literal_Num.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 117)
  def _reduce_21(val, _values, result)
    result = Arbol_Literal_Char.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 118)
  def _reduce_22(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 120)
  def _reduce_23(val, _values, result)
    result = Arbol_Literal_Matr.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 121)
  def _reduce_24(val, _values, result)
    result = Arbol_Literal_Matr.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 123)
  def _reduce_25(val, _values, result)
    result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 124)
  def _reduce_26(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 126)
  def _reduce_27(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 127)
  def _reduce_28(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 129)
  def _reduce_29(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 130)
  def _reduce_30(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 131)
  def _reduce_31(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 132)
  def _reduce_32(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 133)
  def _reduce_33(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 134)
  def _reduce_34(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 136)
  def _reduce_35(val, _values, result)
    result = Arbol_Asignacion.new(nil,val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 138)
  def _reduce_36(val, _values, result)
    result = Arbol_Read.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 139)
  def _reduce_37(val, _values, result)
    result = Arbol_Print.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 141)
  def _reduce_38(val, _values, result)
    result = val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 142)
  def _reduce_39(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 144)
  def _reduce_40(val, _values, result)
    result = Arbol_Secuenciacion.new(val[0] << val[1],nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 146)
  def _reduce_41(val, _values, result)
    result = Arbol_Condicional.new(val[1],val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 147)
  def _reduce_42(val, _values, result)
    result = Arbol_Condicional.new(val[1],val[3],val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 149)
  def _reduce_43(val, _values, result)
    result = Arbol_Rep_Det.new(val[1],val[3],val[5],val[7],nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 150)
  def _reduce_44(val, _values, result)
    result = Arbol_Rep_Det.new(val[1],val[3],val[5],val[9],val[7])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 152)
  def _reduce_45(val, _values, result)
    result = Arbol_Rep_Indet.new(nil, val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 154)
  def _reduce_46(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 155)
  def _reduce_47(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 156)
  def _reduce_48(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 157)
  def _reduce_49(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 158)
  def _reduce_50(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 159)
  def _reduce_51(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 160)
  def _reduce_52(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 162)
  def _reduce_53(val, _values, result)
    result = Arbol_Expr_Aritm.new('+',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 163)
  def _reduce_54(val, _values, result)
    result = Arbol_Expr_Aritm.new('-',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 164)
  def _reduce_55(val, _values, result)
    result = Arbol_Expr_Aritm.new('*',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 165)
  def _reduce_56(val, _values, result)
    result = Arbol_Expr_Aritm.new('/',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 166)
  def _reduce_57(val, _values, result)
    result = Arbol_Expr_Aritm.new('%',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 167)
  def _reduce_58(val, _values, result)
    result = Arbol_Expr_Unaria_Aritm.new(nil,'-',val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 169)
  def _reduce_59(val, _values, result)
    result = Arbol_Expr_Bool.new('/\\',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 170)
  def _reduce_60(val, _values, result)
    result = Arbol_Expr_Bool.new('\\/',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 171)
  def _reduce_61(val, _values, result)
    result = Arbol_Expr_Unaria_Bool.new(nil,'not',val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 173)
  def _reduce_62(val, _values, result)
    result = Arbol_Expr_Char.new(nil,'++',val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 174)
  def _reduce_63(val, _values, result)
    result = Arbol_Expr_Char.new(nil,'--',val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 175)
  def _reduce_64(val, _values, result)
    result = Arbol_Expr_Char.new(nil,'#',val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 177)
  def _reduce_65(val, _values, result)
    result = Arbol_Expr_Matr.new('::',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 178)
  def _reduce_66(val, _values, result)
    result = Arbol_Expr_Unaria_Matr.new(nil,'$',val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 179)
  def _reduce_67(val, _values, result)
    result = Arbol_Expr_Unaria_Matr.new(nil,'?',val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 180)
  def _reduce_68(val, _values, result)
    result = Arbol_Indexacion.new(nil,val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 183)
  def _reduce_69(val, _values, result)
    result = Arbol_Expr_Rel.new('=',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 184)
  def _reduce_70(val, _values, result)
    result = Arbol_Expr_Rel.new('/=',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 185)
  def _reduce_71(val, _values, result)
    result = Arbol_Expr_Rel.new('<',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 186)
  def _reduce_72(val, _values, result)
    result = Arbol_Expr_Rel.new('>',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 187)
  def _reduce_73(val, _values, result)
    result = Arbol_Expr_Rel.new('<=',val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'gramatica.y', 188)
  def _reduce_74(val, _values, result)
    result = Arbol_Expr_Rel.new('>=',val[0],val[2])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


# Si no hay errores léxicos, se procede a hacer el análisis sintáctico
if l.errores.empty?
	p = Parser.new(l.tokens)
	x = p.parse
	puts x
end
