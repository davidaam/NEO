tokens = {
	'/\\' => 'TkConjuncion',
	'\\/' => 'TkDisyuncion',
	'<=' => 'TkMenorIgual',
	'>=' => 'TkMayorIgual',
	'/=' => 'TkDesigual',
	'++' => 'TkSiguienteCar',
	'--' => 'TkAnteriorCar',
	'::' => 'TkConcatenacion',
	'->' => 'TkHacer',
	'<-' => 'TkAsignacion',
	'<' => 'TkMenor',
	'>' => 'TkMayor',
	'=' => 'TkIgual',
	'#' => 'TkValorAscii',
	'$' => 'TkRotacion',
	'?' => 'TkTrasposicion',
	',' => 'TkComa',
	'.' => 'TkPunto',
	':' => 'TkDosPuntos',
	'(' => 'TkParAbre',
	')' => 'TkParCierra',
	'[' => 'TkCorcheteAbre',
	']' => 'TkCorcheteCierra',
	'{' => 'TkLlaveAbre',
	'}' => 'TkLlaveCierra',
	'+' => 'TkSuma',
	'-' => 'TkResta',
	'*' => 'TkMult',
	'/' => 'TkDiv',
	'%' => 'TkMod',
	'not' => 'TkNegacion',
	'caracter' => 'TkCaracter',
	'false' => 'TkFalse',
	'true' => 'TkTrue',
	'id' => 'TkId',
	'numero' => 'TkNum',
	'begin' => 'TkBegin',
	'end' => 'TkEnd',
	'if' => 'TkIf',
	'with' => 'TkWith',
	'var' => 'TkVar',
	'char' => 'TkChar',
	'bool' => 'TkBool',
	'matrix' => 'TkMatrix',
	'int' => 'TkInt',
	'print' => 'TkPrint',
	'otherwise' => 'TkOtherwise',
	'for' => 'TkFor',
	'read' => 'TkRead',
	'step' => 'TkStep',
	'from' => 'TkFrom',
	'to' => 'TkTo',
	'of' => 'TkOf',
	'while' => 'TkWhile',
}
text = File.read("gramatica.y")
tokens.each do |sym,nombre|
	text.gsub! sym, nombre
end
puts text